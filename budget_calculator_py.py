# -*- coding: utf-8 -*-
"""budget_calculator.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sHdhcQ0p9sQjyWac1PLs4Tw92qAPK0HV
"""

import json
import os
from google.colab import drive

# Mount Google Drive for persistent storage
drive.mount('/content/drive')

# File to store budgets in Google Drive
DATA_FILE = "/content/drive/MyDrive/budget_data.json"

def main():
    """Main program loop"""
    while True:
        print_menu()
        choice = input("Enter your choice: ")

        if choice == "1":
            create_new_budget()
        elif choice == "2":
            load_budget()
        elif choice == "3":
            print("Goodbye!")
            break
        else:
            print("Invalid choice. Try again.")

def print_menu():
    """Display main menu options"""
    print("\n=== Monthly Budget Calculator ===")
    print("1. Create New Budget")
    print("2. Load Existing Budget")
    print("3. Exit")

def create_new_budget():
    """Create a new budget from user input"""
    print("\n--- Create New Budget ---")

    # Get income
    income = get_valid_float("Enter your monthly income: $")

    # Get expenses
    expenses = {}
    while True:
        category = input("Enter expense category (or 'done' to finish): ").title()
        if category.lower() == 'done':
            break
        amount = get_valid_float(f"Enter amount for {category}: $")
        expenses[category] = amount

    # Calculate and display results
    display_budget_summary(income, expenses)

    # Save option
    if input("\nSave this budget? (y/n): ").lower() == 'y':
        save_budget(income, expenses)

def load_budget():
    """Load budget from file"""
    if not os.path.exists(DATA_FILE):
        print("No saved budget found!")
        return

    with open(DATA_FILE, 'r') as f:
        data = json.load(f)

    print("\n--- Loaded Budget ---")
    display_budget_summary(data['income'], data['expenses'])

    # Edit option
    if input("\nEdit this budget? (y/n): ").lower() == 'y':
        edit_budget(data)

def display_budget_summary(income, expenses):
    """Display budget calculations and analysis"""
    total_expenses = sum(expenses.values())
    remaining = income - total_expenses

    print("\n--- Budget Summary ---")
    print(f"Total Income: ${income:.2f}")
    print("\nExpenses:")
    for category, amount in expenses.items():
        percent = (amount / income) * 100
        print(f"  {category}: ${amount:.2f} ({percent:.1f}%)")

    print(f"\nTotal Expenses: ${total_expenses:.2f}")
    print(f"Remaining Balance: ${remaining:.2f}")

    if remaining < 0:
        print("⚠️ WARNING: You're overspending!")
    else:
        savings_percent = (remaining / income) * 100
        print(f"✅ Savings Rate: {savings_percent:.1f}%")

def edit_budget(data):
    """Modify existing budget"""
    while True:
        print("\n--- Edit Budget ---")
        print("1. Change Income")
        print("2. Add/Update Expense")
        print("3. Delete Expense")
        print("4. Save and Exit")

        choice = input("Enter your choice: ")

        if choice == "1":
            data['income'] = get_valid_float("Enter new income: $")
        elif choice == "2":
            category = input("Enter category name: ").title()
            amount = get_valid_float(f"Enter amount for {category}: $")
            data['expenses'][category] = amount
        elif choice == "3":
            category = input("Enter category to delete: ").title()
            if category in data['expenses']:
                del data['expenses'][category]
            else:
                print("Category not found!")
        elif choice == "4":
            save_budget(data['income'], data['expenses'])
            break
        else:
            print("Invalid choice!")

        display_budget_summary(data['income'], data['expenses'])

def save_budget(income, expenses):
    """Save budget to JSON file"""
    data = {
        'income': income,
        'expenses': expenses
    }

    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)
    print("Budget saved successfully!")

def get_valid_float(prompt):
    """Get valid numerical input from user"""
    while True:
        try:
            value = float(input(prompt))
            if value < 0:
                print("Please enter a positive number!")
                continue
            return value
        except ValueError:
            print("Invalid input! Please enter a number.")

if __name__ == "__main__":
    main()